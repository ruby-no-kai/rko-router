<% primary_host = ENV.fetch('PRIMARY_HOST', 'rko-router.herokuapp.com') %>
<% platform = ENV.fetch("RKO_ROUTER_PLATFORM", "heroku") %>
<% current_year = '2024' %>

<% if platform == 'heroku' %>
daemon off;
<% end %>

#Heroku dynos have 4 cores.
worker_processes 4;


events {
  use epoll;
  accept_mutex on;
  worker_connections 1024;
}

http {
  gzip on;
  gzip_comp_level 2;
  gzip_min_length 512;

  log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id '
    '$http_x_forwarded_for - $remote_user [$time_local] '
    '"$request" $status $bytes_sent '
    '"$http_referer" "$http_user_agent" "$gzip_ratio"';

  log_format csp_report 'measure#nginx.service=$request_time request_id=$http_x_request_id xff=$http_x_forwarded_for referer="$http_referer" ua="$http_user_agent" csp.report=$request_body';
  map $status $csp_loggable {
      "200"  1;
      default 0;
  }
  map $content_type $csp_bad_content_type {
      default 1;
      "application/json" 0;
      "application/csp-report" 0;
  }
  map $request_uri $request_uri_path {
    "~^(?P<path>[^?]*)(\?.*)?$"  $path;
  }
  map $request_uri_path $implied_cache_control {
    "~\.(?:png|jpg|svg|css|js|js\.map)$"  "public, max-age=31536000";
    default "public, max-age=0, s-maxage=31536000";
  }

  access_log <%= platform == 'heroku' ? 'logs/nginx/access.log' : '/dev/stdout' %> l2met;
  error_log <%= platform == 'heroku' ? 'logs/nginx/access.log' : '/dev/stderr' %>;

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  #Must read the body in 5 seconds.
  client_body_timeout 5;

  port_in_redirect off;

  proxy_ssl_server_name on;

  rewrite_log <%= ENV.fetch("REWRITE_LOG", 'off') %>;

  server {
    listen <%= ENV.fetch("PORT") %> default_server;
    server_name <%= primary_host %> localhost;

    default_type text/plain;

    location = /_200 {
      access_log off;
      return 200;
    }

    location = /_csp {
      if ($request_method != "POST") {
          return 405;
      }

      if ($csp_bad_content_type) {
          return 415;
      }

      access_log <%= platform == 'heroku' ? 'logs/nginx/access.log' : '/dev/stdout' %> csp_report;

      # To enable $request_body
      proxy_set_header Host localhost;
      proxy_pass http://localhost:<%= ENV.fetch("PORT") %>/_200;
    }

    location = /_csp_test {
      add_header Content-Security-Policy-Report-Only "default-src https: 'self' 'unsafe-inline' 'unsafe-eval'; report-uri https://<%= primary_host %>/_csp";
      default_type text/html;
      return 200 "<img src='http://img.sorah.jp/s/2018-06-07_1506_89adg.png'>";
    }

    location = /healthz {
      return 200 "<%= primary_host %>\n";
    }

    location / {
      if ( $http_x_rko_host = "" ) {
        return 404 "<%= primary_host %>\n";
      }
      if ( $http_x_rko_host = "<%= primary_host %>" ) {
        return 404 "<%= primary_host %>\n";
      }
      if ( $http_x_rko_forwarded = "yes" ) {
        return 404 "<%= primary_host %> (loop)\n";
      }

      set $x_rko_xfp "$http_x_rko_xfp";
      if ( $x_rko_xfp = "" ) {
        set $x_rko_xfp "$http_x_forwarded_proto";
      }
      if ( $x_rko_xfp = "" ) {
        set $x_rko_xfp "http";
      }

      proxy_set_header Host $http_x_rko_host;
      proxy_set_header X-Forwarded-Proto $x_rko_xfp;
      proxy_set_header x-rko-forwarded "yes";
      proxy_pass http://localhost:<%= ENV.fetch("PORT") %>;
    }
  }

  server {
    listen <%= ENV.fetch("PORT") %>;
    server_name regional.rubykaigi.org;

    set $csp_policy "";
    if ($http_x_forwarded_proto = "https") {
      set $csp_policy "default-src https: 'self' 'unsafe-inline' 'unsafe-eval'; report-uri https://<%= primary_host %>/_csp";
    }
    add_header Content-Security-Policy-Report-Only "$csp_policy";

    location ~ ^/oedo02(.*) {
      return 301 https://magazine.rubyist.net/articles/0039/0039-MetPragdaveAtAsakusarb.html;
    }

    location /osaka04 {
      include force_https.conf;
      proxy_pass https://rubykansai.github.io;
    }

    location /osaka03 {
      include force_https.conf;
      proxy_pass https://rubykansai.github.io;
    }

    location ~ ^/osaka02(.*) {
      proxy_pass https://rubykansai.github.io;
    }

    location ~ ^/osaka01(.*) {
      proxy_pass https://rubykansai.github.io;
    }

    location /kansai08 {
      include force_https.conf;
      proxy_pass https://rubykansai.github.io;
    }

    location ~ ^/kansai2017(.*) {
      proxy_pass https://rubykansai.github.io;
    }

    #
    # kansai 06, y10y
    #
    location ~ ^/kansai06(.*) {
      proxy_pass https://rubykansai.github.io;
    }

    #
    # kansai 05, y10y
    #
    location ~ ^/kansai05(.*) {
      proxy_pass http://kanrk05.herokuapp.com;
    }

    #
    # chuork 01, y6y
    #
    location ~ ^/chuork01(.*) {
      proxy_pass https://chuork.github.io;
    }

    #
    # okrk01, y6y
    #
    location ~ ^/okrk01(.*) {
      proxy_pass https://okinawarb.github.io;
    }

    #
    # shibuya01, y6y
    #
    location ~ ^/shibuya01(.*) {
    proxy_pass https://shibuyarb.github.io;
    }

    #
    # tokyu14, y6y
    #
    location ~ ^/tokyu14(.*) {
      return 301 https://tokyurubykaigi.github.io/tokyu14;
    }

    #
    # tokyu13, y6y
    #
    location ~ ^/tokyu13(.*) {
      proxy_pass https://tokyurubykaigi.github.io;
    }

    #
    # tokyu12, y6y
    #
    location ~ ^/tokyu12(.*) {
      proxy_pass https://tokyurubykaigi.github.io;
    }

    #
    # tokyu11, y6y
    #
    location ~ ^/tokyu11(.*) {
      proxy_pass https://tokyurubykaigi.github.io;
    }

    #
    # tokyu09, y6y
    #
    location ~ ^/tokyu09(.*) {
      proxy_pass https://tokyurubykaigi.github.io;
    }

    #
    # tokyu08, y6y
    #
    location ~ ^/tokyu08(.*) {
    proxy_pass https://tokyurb.github.io;
    }

    #
    # kanagawa01, y6y
    #
    location ~ ^/kana01(.*) {
    proxy_pass https://kawasakirb.github.io;
    }

    location ~ ^/hamamatsu01(.*) {
    proxy_pass http://rubykaigi-hamamatsu.s3-website-ap-northeast-1.amazonaws.com;
    }

    location ~ ^/(matrk|matsue)08(.*) {
      return 301 http://matsue.rubyist.net/matrk08/;
    }

    location ~ ^/(matrk|matsue)07(.*) {
      return 301 http://matsue.rubyist.net/matrk07/;
    }

    location ~ ^/oedo10(.*) {
      include force_https.conf;
      proxy_pass https://asakusarb.github.io;
    }

    location /tokyo12 {
      include force_https.conf;
      proxy_pass https://tokyorubykaigi12.github.io;
    }

    location ~ ^/tokyo11(.*) {
      proxy_pass https://ko1.github.io;
    }

    location ~ ^/tokyu10(.*) {
      proxy_pass https://tokyurubykaigi.github.io;
    }

    location ~ ^/kwsk01(.*) {
      proxy_pass https://kawasakirb.github.io;
    }

    # regional.rubykaigi.org
    location / {
      include force_https.conf;
      proxy_pass https://regional-gh.rubykaigi.org;
    }
  }

  server {
    listen <%= ENV.fetch("PORT") %>;
    server_name j.rubykaigi.org;
    rewrite ^ http://jrubykaigi.org$request_uri permanent;
  }

  server {
    listen <%= ENV.fetch("PORT") %>;
    server_name yami.rubykaigi.org;

    location = / {
      return 302 http://yami.rubykaigi.org/2011;
    }

    location ~ /2011 {
      return 301 http://yamirubykaigi.wordpress.com;
    }
  }

  server {
    listen <%= ENV.fetch("PORT") %>;
    server_name www.rubykaigi.org;

    if ($host ~* www\.(.*)) {
      set $host_without_www $1;
      rewrite ^(.*)$ http://$host_without_www permanent;
    }
  }

  server {
    listen <%= ENV.fetch("PORT") %>;
    server_name ~^200[6-8]\.rubykaigi\.org$;

    if ($host ~* ^(\d+)\.(.*)) {
      set $rubykaigi_year $1;
      return 301 https://rubykaigi.org/$rubykaigi_year$request_uri;
    }
  }

  server {
    listen <%= ENV.fetch("PORT") %>;
    server_name rubykaigi.org;

    set $csp_policy "";
    if ($http_x_forwarded_proto = "https") {
      set $csp_policy "default-src https: 'self' 'unsafe-inline' 'unsafe-eval'; report-uri https://<%= primary_host %>/_csp";
    }
    add_header Content-Security-Policy-Report-Only "$csp_policy";

    location ~ ^/200[6-9] {
        include force_https.conf;
        proxy_hide_header Cache-Control;
        proxy_hide_header Expires;
        add_header Cache-Control "public, max-age=604800, s-maxage=31536000";
        proxy_pass https://2009-2011.rubykaigi.org;
    }

    location ~ ^/201[0-9](.*) {
        include force_https.conf;
        proxy_hide_header Cache-Control;
        proxy_hide_header Expires;
        add_header Cache-Control "public, max-age=604800, s-maxage=31536000";
        proxy_pass https://2009-2011.rubykaigi.org;
    }

    location /2020 {
        include force_https.conf;
        proxy_hide_header Cache-Control;
        proxy_hide_header Expires;
        add_header Cache-Control "public, max-age=604800, s-maxage=31536000";
        proxy_pass https://2009-2011.rubykaigi.org;
    }

    location /2020-takeout {
        include force_https.conf;
        proxy_hide_header Cache-Control;
        proxy_hide_header Expires;
        add_header Cache-Control "public, max-age=604800, s-maxage=31536000";
        proxy_pass https://2009-2011.rubykaigi.org;
    }

    location = /2021 {
      add_header Cache-Control "public, max-age=604800, s-maxage=31536000";
      rewrite ^/2021/?$ https://rubykaigi.org/2021-takeout/ redirect;
    }

    location /2021-takeout {
        include force_https.conf;
        proxy_hide_header Cache-Control;
        proxy_hide_header Expires;
        add_header Cache-Control "public, max-age=604800, s-maxage=31536000";
        proxy_pass https://2009-2011.rubykaigi.org;
    }

    location ~ ^/\.2007(.*) {
        proxy_hide_header Cache-Control;
        proxy_hide_header Expires;
        add_header Cache-Control "public, max-age=604800, s-maxage=31536000";
        proxy_pass https://2009-2011.rubykaigi.org;
    }

    location ~ ^/202[2-3] {
        include force_https.conf;
        proxy_hide_header Cache-Control;
        proxy_hide_header Expires;
        add_header Cache-Control "public, max-age=604800, s-maxage=31536000";
        proxy_pass https://2009-2011.rubykaigi.org;
    }

    location /2024 {
        include force_https.conf;
        proxy_hide_header Cache-Control;
        proxy_hide_header Expires;
        add_header Cache-Control "$implied_cache_control";
        proxy_pass https://gh-pages.rubykaigi.org;
    }

    location /2025 {
        include force_https.conf;
        proxy_hide_header Cache-Control;
        proxy_hide_header Expires;
        add_header Cache-Control "public, max-age=0, s-maxage=0";
        proxy_pass https://gh-pages.rubykaigi.org;
    }


    # current rubykaigi
    location = / {
        error_page 302 @root_page;
        return 302 https://rubykaigi.org/<%= current_year %>/;
    }

    location = /go/policies {
        error_page 302 @root_page;
        return 302 https://rubykaigi.org/<%= current_year %>/policies;
    }
    location = /go/prospectus-ja {
        return 302 https://rubykaigi-public.s3.dualstack.ap-northeast-1.amazonaws.com/2024/rubykaigi2024-sponsorship-prospectus-ja.pdf;
    }
    location = /go/prospectus-en {
        return 302 https://rubykaigi-public.s3.dualstack.ap-northeast-1.amazonaws.com/2024/rubykaigi2024-sponsorship-prospectus-en.pdf;
    }
    location = /go/discord {
        return 302 https://discord.gg/AjSCZzc6YG;
    }

    # rubykaigi internals
    location = /go/program {
        return 302 https://rubykaigi.esa.io/posts/1380;
    }
    location = /go/team {
        return 302 https://rubykaigi.esa.io/posts/1437;
    }
    location = /go/expense {
        return 302 https://rubykaigi.esa.io/posts/1435;
    }
    location = /go/payment {
        return 302 https://rubykaigi.esa.io/posts/1434;
    }
    location = /go/drive {
        return 302 https://drive.google.com/drive/folders/1E4HmwzI_BQCs25RNJsNfigko_O240qlh?usp=drive_link;
    }
    location = /go/kanban {
        return 302 https://github.com/orgs/ruby-no-kai/projects/5;
    }

    location @root_page {
      default_type "text/html";
      return 200 "<!DOCTYPE html><html><head><meta content='0; url=/<%= current_year %>/' http-equiv='refresh'><link rel='me' href='https://ruby.social/@rubykaigi'><body><a href='/<%= current_year %>/'>RubyKaigi <%= current_year %></a>\n";
    }
  }

  server {
    listen <%= ENV.fetch("PORT") %>;
    server_name sapporo.rubykaigi.org;
    location / {
      proxy_set_header Host $host;
      proxy_pass https://ruby-sapporo.github.io;
    }
  }

  server {
    listen <%= ENV.fetch("PORT") %>;
    server_name cfp.rubykaigi.org;
    location / {
      return 302 https://rubykaigi-cfp.herokuapp.com;
    }
  }

  server {
    listen <%= ENV.fetch("PORT") %>;
    server_name sponsorship.rubykaigi.org;
    location / {
      return 302 https://sponsorships.rubykaigi.org;
    }
  }
}
